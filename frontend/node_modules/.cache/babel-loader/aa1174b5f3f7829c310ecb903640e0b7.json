{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { readString } from \"react-papaparse\";\n// import goodreadsSentiment from \"../../../assets/csv/goodreads_reviews_sentiment.csv\";\n// import PropTypes from \"prop-types\";\n// import { alpha } from \"@mui/material/styles\";\n// import Box from \"@mui/material/Box\";\n// import Table from \"@mui/material/Table\";\n// import TableBody from \"@mui/material/TableBody\";\n// import TableCell from \"@mui/material/TableCell\";\n// import TableContainer from \"@mui/material/TableContainer\";\n// import TableHead from \"@mui/material/TableHead\";\n// import TablePagination from \"@mui/material/TablePagination\";\n// import TableRow from \"@mui/material/TableRow\";\n// import TableSortLabel from \"@mui/material/TableSortLabel\";\n// import Toolbar from \"@mui/material/Toolbar\";\n// import Typography from \"@mui/material/Typography\";\n// import Paper from \"@mui/material/Paper\";\n// import IconButton from \"@mui/material/IconButton\";\n// import Tooltip from \"@mui/material/Tooltip\";\n// import FormControlLabel from \"@mui/material/FormControlLabel\";\n// import Switch from \"@mui/material/Switch\";\n// import { visuallyHidden } from \"@mui/utils\";\n// import Icon from \"@mui/material/Icon\";\n// import { getLineAndCharacterOfPosition } from \"typescript\";\n// export default function PlnSentimentCsv() {\n//   function descendingComparator(a, b, orderBy) {\n//     if (b[orderBy] < a[orderBy]) {\n//       return -1;\n//     }\n//     if (b[orderBy] > a[orderBy]) {\n//       return 1;\n//     }\n//     return 0;\n//   }\n//   function getComparator(order, orderBy) {\n//     return order === \"desc\"\n//       ? (a, b) => descendingComparator(a, b, orderBy)\n//       : (a, b) => -descendingComparator(a, b, orderBy);\n//   }\n//   function stableSort(array, comparator) {\n//     const stabilizedThis = array.map((el, index) => [el, index]);\n//     stabilizedThis.sort((a, b) => {\n//       const order = comparator(a[0], b[0]);\n//       if (order !== 0) {\n//         return order;\n//       }\n//       return a[1] - b[1];\n//     });\n//     return stabilizedThis.map((el) => el[0]);\n//   }\n//   //id\trating\tvotes\tread_at\tread_count\tcomments_count\tbook_id\treview_text\tuser_id\tuser_name\tuser_location\tread_status\treview_language\treview_body\tcompound\tneg\tneu\tpos\ttb_Pol\ttb_Subj\n//   const headCells = [\n//     {\n//       id: \"id\",\n//       numeric: true,\n//       disablePadding: true,\n//       label: \"ID\"\n//     },\n//     {\n//       id: \"rating\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Rating\"\n//     },\n//     {\n//       id: \"read_at\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Data leitura\"\n//     },\n//     {\n//       id: \"read_count\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"N. de leituras\"\n//     },\n//     {\n//       id: \"comments_count\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Número de comentários\"\n//     },\n//     {\n//       id: \"book_id\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Id livro\"\n//     },\n//     {\n//       id: \"review_text\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Texto Review\"\n//     },\n//     {\n//       id: \"user_id\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Id user\"\n//     },\n//     {\n//       id: \"user_name\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Nome user\"\n//     },\n//     {\n//       id: \"user_location\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Localização user\"\n//     },\n//     {\n//       id: \"read_status\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Status\"\n//     },\n//     {\n//       id: \"review_language\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Idioma review\"\n//     },\n//     {\n//       id: \"review_body\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Texto review\"\n//     },\n//     {\n//       id: \"compound\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Compound\"\n//     },\n//     {\n//       id: \"neg\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Negativo\"\n//     },\n//     {\n//       id: \"neu\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Neutro\"\n//     },\n//     {\n//       id: \"pos\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Positivo\"\n//     },\n//     {\n//       id: \"tb_Pol\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"TextBlob Polaridade\"\n//     },\n//     {\n//       id: \"tb_Subj\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"TextBlob Subjetividade\"\n//     }\n//   ];\n//   function EnhancedTableHead(props) {\n//     const { order, orderBy, onRequestSort } = props;\n//     const createSortHandler = (property) => (event) => {\n//       onRequestSort(event, property);\n//     };\n//     return (\n//       <TableHead>\n//         <TableRow>\n//           {headCells.map((headCell) => (\n//             <TableCell\n//               key={headCell.id}\n//               align={headCell.numeric ? \"right\" : \"left\"}\n//               padding={headCell.disablePadding ? \"none\" : \"normal\"}\n//               sortDirection={orderBy === headCell.id ? order : false}\n//             >\n//               <TableSortLabel\n//                 active={orderBy === headCell.id}\n//                 direction={orderBy === headCell.id ? order : \"asc\"}\n//                 onClick={createSortHandler(headCell.id)}\n//               >\n//                 {headCell.label}\n//                 {orderBy === headCell.id ? (\n//                   <Box component=\"span\" sx={visuallyHidden}>\n//                     {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n//                   </Box>\n//                 ) : null}\n//               </TableSortLabel>\n//             </TableCell>\n//           ))}\n//         </TableRow>\n//       </TableHead>\n//     );\n//   }\n//   EnhancedTableHead.propTypes = {\n//     onRequestSort: PropTypes.func.isRequired,\n//     order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n//     orderBy: PropTypes.string.isRequired\n//   };\n//   const EnhancedTableToolbar = (props) => {\n//     //const { numSelected } = props;\n//     return (\n//       <Toolbar\n//         sx={{\n//           pl: { sm: 2 },\n//           pr: { xs: 1, sm: 1 },\n//           ...{\n//             bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity)\n//           }\n//         }}\n//       >\n//         <Typography sx={{ flex: \"1 1 100%\" }} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n//           goodreads_reviews_sentiment.csv\n//         </Typography>\n//         <Tooltip title=\"Filter list\">\n//           <IconButton>\n//             <Icon baseClassName=\"fas\" className=\"fa-regular fa-filter\" />\n//           </IconButton>\n//         </Tooltip>\n//       </Toolbar>\n//     );\n//   };\n//   EnhancedTableToolbar.propTypes = {\n//     numSelected: PropTypes.number.isRequired\n//   };\n//   const [order, setOrder] = React.useState(\"asc\");\n//   const [orderBy, setOrderBy] = React.useState(\"titulo\");\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const [rows, setRows] = useState([]);\n//   const dados = [];\n//   function readCsv() {\n//     const linhaTemp = [];\n//     const papaConfig = {\n//       delimiter: \";\",\n//       header: \"true\",\n//       complete: (results, file) => {\n//         //setDados(results.data);\n//         dados.push(results.data);\n//         dados[0].forEach((item) => {\n//           linhaTemp.push(item);\n//         });\n//         setRows(linhaTemp);\n//         console.log(\"linhas: \", rows);\n//       },\n//       download: true,\n//       error: (error, file) => {\n//         console.log(\"Error while parsing:\", error, file);\n//       }\n//     };\n//     readString(goodreadsSentiment, papaConfig);\n//   }\n//   const handleRequestSort = (event, property) => {\n//     const isAsc = orderBy === property && order === \"asc\";\n//     setOrder(isAsc ? \"desc\" : \"asc\");\n//     setOrderBy(property);\n//   };\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n//     }\n//     setSelected(newSelected);\n//   };\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n//   readCsv();\n//   return (\n//     <>\n//       <Box sx={{ width: \"100%\" }}>\n//         <Paper sx={{ width: \"100%\", mb: 2 }}>\n//           <EnhancedTableToolbar numSelected={selected.length} />\n//           <TableContainer>\n//             <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\" size={\"small\"}>\n//               <EnhancedTableHead order={order} orderBy={orderBy} onRequestSort={handleRequestSort} />\n//               <TableBody>\n//                 {stableSort(rows, getComparator(order, orderBy))\n//                   .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                   .map((row, index) => {\n//                     const labelId = `enhanced-table-checkbox-${index}`;\n//                     return (\n//                       <TableRow\n//                         hover\n//                         onClick={(event) => handleClick(event, row.id)}\n//                         role=\"checkbox\"\n//                         tabIndex={-1}\n//                         key={row.id}\n//                       >\n//                         <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n//                           {row.id}\n//                         </TableCell>\n//                         <TableCell align=\"right\">{row.rating}</TableCell>\n//                         <TableCell align=\"right\">{row.votes}</TableCell>\n//                         <TableCell align=\"right\">{row.read_at}</TableCell>\n//                         <TableCell align=\"right\">{row.read_count}</TableCell>\n//                         <TableCell align=\"right\">{row.comments_count}</TableCell>\n//                         <TableCell align=\"right\">{row.book_id}</TableCell>\n//                         <TableCell align=\"right\">{row.review_text}</TableCell>\n//                         <TableCell align=\"right\">{row.user_id}</TableCell>\n//                         <TableCell align=\"right\">{row.user_name}</TableCell>\n//                         <TableCell align=\"right\">{row.user_location}</TableCell>\n//                         <TableCell align=\"right\">{row.read_status}</TableCell>\n//                         <TableCell align=\"right\">{row.review_language}</TableCell>\n//                         <TableCell align=\"right\">{row.review_body}</TableCell>\n//                         <TableCell align=\"right\">{row.compound}</TableCell>\n//                         <TableCell align=\"right\">{row.neg}</TableCell>\n//                         <TableCell align=\"right\">{row.neu}</TableCell>\n//                         <TableCell align=\"right\">{row.pos}</TableCell>\n//                         <TableCell align=\"right\">{row.tb_Pol}</TableCell>\n//                         <TableCell align=\"right\">{row.tb_Subj}</TableCell>\n//                       </TableRow>\n//                     );\n//                   })}\n//                 {emptyRows > 0 && (\n//                   <TableRow\n//                     style={{\n//                       height: (dense ? 33 : 53) * emptyRows\n//                     }}\n//                   >\n//                     <TableCell colSpan={6} />\n//                   </TableRow>\n//                 )}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//           <TablePagination\n//             rowsPerPageOptions={[5, 10, 25]}\n//             component=\"div\"\n//             count={rows.length}\n//             rowsPerPage={rowsPerPage}\n//             page={page}\n//             onPageChange={handleChangePage}\n//             onRowsPerPageChange={handleChangeRowsPerPage}\n//           />\n//         </Paper>\n//       </Box>\n//     </>\n//   );\n// }","map":{"version":3,"sources":["/Users/clarissescofield/Desktop/POC/lectio/src/features/pln/views/PlnSentimentCsv.js"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { readString } from \"react-papaparse\";\n// import goodreadsSentiment from \"../../../assets/csv/goodreads_reviews_sentiment.csv\";\n// import PropTypes from \"prop-types\";\n// import { alpha } from \"@mui/material/styles\";\n// import Box from \"@mui/material/Box\";\n// import Table from \"@mui/material/Table\";\n// import TableBody from \"@mui/material/TableBody\";\n// import TableCell from \"@mui/material/TableCell\";\n// import TableContainer from \"@mui/material/TableContainer\";\n// import TableHead from \"@mui/material/TableHead\";\n// import TablePagination from \"@mui/material/TablePagination\";\n// import TableRow from \"@mui/material/TableRow\";\n// import TableSortLabel from \"@mui/material/TableSortLabel\";\n// import Toolbar from \"@mui/material/Toolbar\";\n// import Typography from \"@mui/material/Typography\";\n// import Paper from \"@mui/material/Paper\";\n// import IconButton from \"@mui/material/IconButton\";\n// import Tooltip from \"@mui/material/Tooltip\";\n// import FormControlLabel from \"@mui/material/FormControlLabel\";\n// import Switch from \"@mui/material/Switch\";\n// import { visuallyHidden } from \"@mui/utils\";\n// import Icon from \"@mui/material/Icon\";\n// import { getLineAndCharacterOfPosition } from \"typescript\";\n\n// export default function PlnSentimentCsv() {\n//   function descendingComparator(a, b, orderBy) {\n//     if (b[orderBy] < a[orderBy]) {\n//       return -1;\n//     }\n//     if (b[orderBy] > a[orderBy]) {\n//       return 1;\n//     }\n//     return 0;\n//   }\n\n//   function getComparator(order, orderBy) {\n//     return order === \"desc\"\n//       ? (a, b) => descendingComparator(a, b, orderBy)\n//       : (a, b) => -descendingComparator(a, b, orderBy);\n//   }\n\n//   function stableSort(array, comparator) {\n//     const stabilizedThis = array.map((el, index) => [el, index]);\n//     stabilizedThis.sort((a, b) => {\n//       const order = comparator(a[0], b[0]);\n//       if (order !== 0) {\n//         return order;\n//       }\n//       return a[1] - b[1];\n//     });\n//     return stabilizedThis.map((el) => el[0]);\n//   }\n\n//   //id\trating\tvotes\tread_at\tread_count\tcomments_count\tbook_id\treview_text\tuser_id\tuser_name\tuser_location\tread_status\treview_language\treview_body\tcompound\tneg\tneu\tpos\ttb_Pol\ttb_Subj\n//   const headCells = [\n//     {\n//       id: \"id\",\n//       numeric: true,\n//       disablePadding: true,\n//       label: \"ID\"\n//     },\n//     {\n//       id: \"rating\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Rating\"\n//     },\n//     {\n//       id: \"read_at\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Data leitura\"\n//     },\n//     {\n//       id: \"read_count\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"N. de leituras\"\n//     },\n//     {\n//       id: \"comments_count\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Número de comentários\"\n//     },\n//     {\n//       id: \"book_id\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Id livro\"\n//     },\n//     {\n//       id: \"review_text\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Texto Review\"\n//     },\n//     {\n//       id: \"user_id\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Id user\"\n//     },\n//     {\n//       id: \"user_name\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Nome user\"\n//     },\n//     {\n//       id: \"user_location\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Localização user\"\n//     },\n//     {\n//       id: \"read_status\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Status\"\n//     },\n//     {\n//       id: \"review_language\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Idioma review\"\n//     },\n//     {\n//       id: \"review_body\",\n//       numeric: false,\n//       disablePadding: false,\n//       label: \"Texto review\"\n//     },\n//     {\n//       id: \"compound\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Compound\"\n//     },\n//     {\n//       id: \"neg\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Negativo\"\n//     },\n//     {\n//       id: \"neu\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Neutro\"\n//     },\n//     {\n//       id: \"pos\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"Positivo\"\n//     },\n//     {\n//       id: \"tb_Pol\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"TextBlob Polaridade\"\n//     },\n//     {\n//       id: \"tb_Subj\",\n//       numeric: true,\n//       disablePadding: false,\n//       label: \"TextBlob Subjetividade\"\n//     }\n//   ];\n\n//   function EnhancedTableHead(props) {\n//     const { order, orderBy, onRequestSort } = props;\n\n//     const createSortHandler = (property) => (event) => {\n//       onRequestSort(event, property);\n//     };\n\n//     return (\n//       <TableHead>\n//         <TableRow>\n//           {headCells.map((headCell) => (\n//             <TableCell\n//               key={headCell.id}\n//               align={headCell.numeric ? \"right\" : \"left\"}\n//               padding={headCell.disablePadding ? \"none\" : \"normal\"}\n//               sortDirection={orderBy === headCell.id ? order : false}\n//             >\n//               <TableSortLabel\n//                 active={orderBy === headCell.id}\n//                 direction={orderBy === headCell.id ? order : \"asc\"}\n//                 onClick={createSortHandler(headCell.id)}\n//               >\n//                 {headCell.label}\n//                 {orderBy === headCell.id ? (\n//                   <Box component=\"span\" sx={visuallyHidden}>\n//                     {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n//                   </Box>\n//                 ) : null}\n//               </TableSortLabel>\n//             </TableCell>\n//           ))}\n//         </TableRow>\n//       </TableHead>\n//     );\n//   }\n\n//   EnhancedTableHead.propTypes = {\n//     onRequestSort: PropTypes.func.isRequired,\n//     order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n//     orderBy: PropTypes.string.isRequired\n//   };\n\n//   const EnhancedTableToolbar = (props) => {\n//     //const { numSelected } = props;\n\n//     return (\n//       <Toolbar\n//         sx={{\n//           pl: { sm: 2 },\n//           pr: { xs: 1, sm: 1 },\n//           ...{\n//             bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity)\n//           }\n//         }}\n//       >\n//         <Typography sx={{ flex: \"1 1 100%\" }} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n//           goodreads_reviews_sentiment.csv\n//         </Typography>\n\n//         <Tooltip title=\"Filter list\">\n//           <IconButton>\n//             <Icon baseClassName=\"fas\" className=\"fa-regular fa-filter\" />\n//           </IconButton>\n//         </Tooltip>\n//       </Toolbar>\n//     );\n//   };\n\n//   EnhancedTableToolbar.propTypes = {\n//     numSelected: PropTypes.number.isRequired\n//   };\n\n//   const [order, setOrder] = React.useState(\"asc\");\n//   const [orderBy, setOrderBy] = React.useState(\"titulo\");\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const [rows, setRows] = useState([]);\n//   const dados = [];\n\n//   function readCsv() {\n//     const linhaTemp = [];\n//     const papaConfig = {\n//       delimiter: \";\",\n//       header: \"true\",\n//       complete: (results, file) => {\n//         //setDados(results.data);\n//         dados.push(results.data);\n//         dados[0].forEach((item) => {\n//           linhaTemp.push(item);\n//         });\n//         setRows(linhaTemp);\n//         console.log(\"linhas: \", rows);\n//       },\n//       download: true,\n//       error: (error, file) => {\n//         console.log(\"Error while parsing:\", error, file);\n//       }\n//     };\n\n//     readString(goodreadsSentiment, papaConfig);\n//   }\n\n//   const handleRequestSort = (event, property) => {\n//     const isAsc = orderBy === property && order === \"asc\";\n//     setOrder(isAsc ? \"desc\" : \"asc\");\n//     setOrderBy(property);\n//   };\n\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n//     }\n\n//     setSelected(newSelected);\n//   };\n\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n\n\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n//   readCsv();\n\n//   return (\n//     <>\n//       <Box sx={{ width: \"100%\" }}>\n//         <Paper sx={{ width: \"100%\", mb: 2 }}>\n//           <EnhancedTableToolbar numSelected={selected.length} />\n//           <TableContainer>\n//             <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\" size={\"small\"}>\n//               <EnhancedTableHead order={order} orderBy={orderBy} onRequestSort={handleRequestSort} />\n//               <TableBody>\n//                 {stableSort(rows, getComparator(order, orderBy))\n//                   .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                   .map((row, index) => {\n//                     const labelId = `enhanced-table-checkbox-${index}`;\n\n//                     return (\n//                       <TableRow\n//                         hover\n//                         onClick={(event) => handleClick(event, row.id)}\n//                         role=\"checkbox\"\n//                         tabIndex={-1}\n//                         key={row.id}\n//                       >\n//                         <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n//                           {row.id}\n//                         </TableCell>\n//                         <TableCell align=\"right\">{row.rating}</TableCell>\n//                         <TableCell align=\"right\">{row.votes}</TableCell>\n//                         <TableCell align=\"right\">{row.read_at}</TableCell>\n//                         <TableCell align=\"right\">{row.read_count}</TableCell>\n//                         <TableCell align=\"right\">{row.comments_count}</TableCell>\n//                         <TableCell align=\"right\">{row.book_id}</TableCell>\n//                         <TableCell align=\"right\">{row.review_text}</TableCell>\n//                         <TableCell align=\"right\">{row.user_id}</TableCell>\n//                         <TableCell align=\"right\">{row.user_name}</TableCell>\n//                         <TableCell align=\"right\">{row.user_location}</TableCell>\n//                         <TableCell align=\"right\">{row.read_status}</TableCell>\n//                         <TableCell align=\"right\">{row.review_language}</TableCell>\n//                         <TableCell align=\"right\">{row.review_body}</TableCell>\n//                         <TableCell align=\"right\">{row.compound}</TableCell>\n//                         <TableCell align=\"right\">{row.neg}</TableCell>\n//                         <TableCell align=\"right\">{row.neu}</TableCell>\n//                         <TableCell align=\"right\">{row.pos}</TableCell>\n//                         <TableCell align=\"right\">{row.tb_Pol}</TableCell>\n//                         <TableCell align=\"right\">{row.tb_Subj}</TableCell>\n//                       </TableRow>\n//                     );\n//                   })}\n//                 {emptyRows > 0 && (\n//                   <TableRow\n//                     style={{\n//                       height: (dense ? 33 : 53) * emptyRows\n//                     }}\n//                   >\n//                     <TableCell colSpan={6} />\n//                   </TableRow>\n//                 )}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//           <TablePagination\n//             rowsPerPageOptions={[5, 10, 25]}\n//             component=\"div\"\n//             count={rows.length}\n//             rowsPerPage={rowsPerPage}\n//             page={page}\n//             onPageChange={handleChangePage}\n//             onRowsPerPageChange={handleChangeRowsPerPage}\n//           />\n//         </Paper>\n//       </Box>\n//     </>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}